/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace CrowdFunding {
  export type CampaignStruct = {
    owner: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    target: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    amountCollected: PromiseOrValue<BigNumberish>;
    image: PromiseOrValue<string>;
    donators: PromiseOrValue<string>[];
    donations: PromiseOrValue<BigNumberish>[];
  };

  export type CampaignStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string[],
    BigNumber[]
  ] & {
    owner: string;
    title: string;
    description: string;
    target: BigNumber;
    deadline: BigNumber;
    amountCollected: BigNumber;
    image: string;
    donators: string[];
    donations: BigNumber[];
  };
}

export interface CrowdFundingInterface extends utils.Interface {
  functions: {
    "campaigns(uint256)": FunctionFragment;
    "createCampaign(address,string,string,uint256,uint256,string)": FunctionFragment;
    "donateToCampaign(uint256,uint256)": FunctionFragment;
    "getCampaigns()": FunctionFragment;
    "getDonators(uint256)": FunctionFragment;
    "numberOfCampaigns()": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "campaigns"
      | "createCampaign"
      | "donateToCampaign"
      | "getCampaigns"
      | "getDonators"
      | "numberOfCampaigns"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "campaigns",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donateToCampaign",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donateToCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {};
}

export interface CrowdFunding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdFundingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, string] & {
        owner: string;
        title: string;
        description: string;
        target: BigNumber;
        deadline: BigNumber;
        amountCollected: BigNumber;
        image: string;
      }
    >;

    createCampaign(
      _owner: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _target: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donateToCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCampaigns(
      overrides?: CallOverrides
    ): Promise<[CrowdFunding.CampaignStructOutput[]]>;

    getDonators(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    numberOfCampaigns(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  campaigns(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, string] & {
      owner: string;
      title: string;
      description: string;
      target: BigNumber;
      deadline: BigNumber;
      amountCollected: BigNumber;
      image: string;
    }
  >;

  createCampaign(
    _owner: PromiseOrValue<string>,
    _title: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _target: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    _image: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donateToCampaign(
    _campaignId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCampaigns(
    overrides?: CallOverrides
  ): Promise<CrowdFunding.CampaignStructOutput[]>;

  getDonators(
    _campaignId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  numberOfCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, string] & {
        owner: string;
        title: string;
        description: string;
        target: BigNumber;
        deadline: BigNumber;
        amountCollected: BigNumber;
        image: string;
      }
    >;

    createCampaign(
      _owner: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _target: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _image: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donateToCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCampaigns(
      overrides?: CallOverrides
    ): Promise<CrowdFunding.CampaignStructOutput[]>;

    getDonators(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    numberOfCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCampaign(
      _owner: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _target: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donateToCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    getDonators(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCampaign(
      _owner: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _target: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donateToCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCampaigns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDonators(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfCampaigns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
